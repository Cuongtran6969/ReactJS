
//useCallback use disvantage of memo when prop is object or fun
//it will referent to a object out of component
//can use dependence like useEffect to reuturn new referent when change dependence
//so should use useCallback for function when prop is function/object and use react memo for child

//App.js
import { useCallback, useState } from "react";
import Content from "./content";

function App() {
  const [count, setCount] = useState(0)
  
  const handleClick = useCallback(() => {
    setCount(prev => prev+1)
  }, [])

  return (
    <div style={{padding: 20}}>
      <h1>{count}</h1>
      //prop name onIncrease
      <Content onIncrease={handleClick}/>
    </div>
  )

//content.js
import { memo } from "react"

const Content = ({onIncrease}) => {
    console.log('re-render');
    return (
        <div>
            <h2>hello</h2>
            <button onClick={onIncrease}>Click</button>
        </div>
    )
}
export default memo(Content)

}

export default App;
