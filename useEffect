//useEffect have 3 stuation:
//1. useEffect(callBack)
//2. useEffect(callBack, [])
//3. useEffect(callBack, [dependence])

/* TH1 mỗi khi Content được mount vào thì useEffect được gọi*/
//chức năng input value và title của tab thay đổi theo/
//khi nó được thêm vào trong DOM thì nó mới gọi đến useEffect/
import { useEffect } from "react"
import { useState } from "react"
const Content = () => {
    const [state, setState] = useState('')
    useEffect(() => {
        console.log('Renders');
    })

   const handleOnchage = (value) => {
    document.title = value
    setState(value)
   }

    return (
     <div>
      <input
       value={state}
       onChange={(e) => handleOnchage(e.target.value)}
      />
     </div>
    )
}
export default ContContent

//TH2: khi input vào thì useEffect sẽ hoạt động nên sẽ gọi callBack mỗi khi input
//đối số thứ 2 của useEffect là một mảng rỗng, có nghĩa nó chỉ gọi và thực hiện duy nhất lđầuđầu
import { useEffect } from "react"
import { useState } from "react"
const Content = () => {
    const [state, setState] = useState('')
    useEffect(() => {
        console.log('Renders');
    }, [])

   const handleOnchage = (value) => {
    document.title = value
    setState(value)
   }

    return (
     <div>
      <input
       value={state}
       onChange={(e) => handleOnchage(e.target.value)}
      />
     </div>
    )
}
export default ContContent

//TH3: đối số thứ 2 là dependence, khi dependence thay đổi thì useEffect mới được thực hiện
import { useEffect } from "react"
import { useState } from "react"
const types = ['posts', 'comments', 'albums']
const Content = () => {
    const [title, setTitle] = useState('')
    const [state, setState] = useState('posts')
    const [posts, setPost] = useState([])
    //khi render ra thi useEffect duoc goi, ma trong useEffect co setPost thi no lai render lai
    //dieu do dan den vong lap vo han
    //de giai guyet van def nay, ta su dung TH2 cos them dependence, tham so phu thuoc
    useEffect(() => {
        fetch(`https://jsonplaceholder.typicode.com/${state}`)
            .then(res => res.json())
            .then(data => {
                setPost(data)
            })
    },[state])

    return (
        <div>
            <input
            value = {title}
            onChange={(e) => setTitle(e.target.value)}
            />
            <div>
            {types.map(type => 
              (<button 
                style={type === state ? {
                    color: '#fff',
                    backgroundColor: 'red',
                }: {}}
                key={type} 
                onClick={() => setState(type)}>{type}</button>)     
            )}
            </div>
            <ul>
                {posts.map(post => (
                    <li key={post.id}>{post.id} {post.title||post.name}</li>
                ))}
            </ul>
        </div>
    )
}
export default Content
//function click and render product of button
const types = ['posts', 'comments', 'albums']
const Content = () => {
    const [title, setTitle] = useState('')
    const [state, setState] = useState('posts')
    const [posts, setPost] = useState([])
    //khi render ra thi useEffect duoc goi, ma trong useEffect co setPost thi no lai render lai
    //dieu do dan den vong lap vo han
    //de giai guyet van def nay, ta su dung TH2 cos them dependence, tham so phu thuoc
    useEffect(() => {
        fetch(`https://jsonplaceholder.typicode.com/${state}`)
            .then(res => res.json())
            .then(data => {
                setPost(data)
            })
        console.log('render');
    },[state])

    return (
        <div>
            <input
            value = {title}
            onChange={(e) => setTitle(e.target.value)}
            />
            <div>
            //render all button is type
            {types.map(type => 
              (<button 
                style={type === state ? {
                    color: '#fff',
                    backgroundColor: 'red',
                }: {}}
                key={type} 
                onClick={() => setState(type)}>{type}</button>)     
            )}
            </div>
            <ul>
            //render current data
                {posts.map(post => (
                    <li key={post.id}>{post.id} {post.title||post.name}</li>
                ))}
            </ul>
        </div>
    )
}
//remove setTimeOut/ addEventlistner when compnent unmount
 useEffect(() => {
        //each set then it will not render the setState will check value of check diffrent then render other will not render
        //it use === operation to compare the before value
        const hanldeScroll = () => {
            if(window.scrollY>200) {
                setGo(true)
            }else{
                setGo(false)
            }
        }
        
        window.addEventListener('scroll', hanldeScroll())
        //in useEffect should return afunction clear when component unmount beacause addEvenlistener in windown scope
        //because with time scroll it will render new component, but listener not unmount
        return () => {
                window.addEventListener('scroll', hanldeScroll())
                console.log('..unmounting');
            }
    }, [])
//
const courses = [
    {
        id: 1,
        title: 'html, css'
    },
    {
        id: 2,
        title: 'React js'
    },
    {
        id: 3,
        title: 'Nodejs'
    }
]
const Content = () => {
    const [lessonId, setlessonId] = useState(1)
    useEffect(()=> {
        const handleComment = ({detail}) => {
          console.log(detail);
        }
        window.addEventListener(`lesson-${lessonId}`, handleComment)
        return () => {
            window.removeEventListener(`lesson-${lessonId}`, handleComment)
        }  
    }, [lessonId])
    return (
        <ul>
            {
             courses.map(course => (
                <li style = {
                    course.id === lessonId ? {color: 'red'} : {}}
                    onClick={() => setlessonId(course.id)}
                    >{course.title}
                </li>
              ))
            }
        </ul>
    )
}
export default Content
